archetype SwapRouter(const factory: address, const kodexV3lib: address)

constant INVALID_OPERATION: string = "ERR"
constant MIN_SQRT_RATIO: nat = 4295128739
constant MAX_SQRT_RATIO: nat = 1461446703485210103287273052203988822378723970342

enum token_type = 
| tez_token<unit>
| fa12<address>
| fa20<address * nat>

record ExactInputSingleParams {
    tokenIn_InSParam: token_type;
    tokenOut_InSParam: token_type;
    fee_InSParam: nat;
    recipient_InSParam: address;
    deadline_InSParam: date;
    amountIn_InSParam: nat;
    amountOutMinimum_InSParam: nat;
    sqrtPriceLimitX96_InSParam: nat;
}

record ExactInputParams {
    path_InParam: bytes;
    recipient_InParam: address;
    deadline_InParam: date;
    amountIn_InParam: nat;
    amountOutMinimum_InParam: nat;
}

record ExactOutputSingleParams {
    tokenIn_OutSParam: token_type;
    tokenOut_OutSParam: token_type;
    fee_OutSParam: nat;
    recipient_OutSParam: address;
    deadline_OutSParam: date;
    amountOut_OutSParam: nat;
    amountInMaximum_OutSParam: nat;
    sqrtPriceLimitX96_OutSParam: nat;
}

record ExactOutputParams {
    path_OutParam: bytes;
    recipient_OutParam: address;
    deadline_OutParam: nat;
    amountOut_OutParam: nat;
    amountInMaximum_OutParam: nat;
}

function checkDeadline(deadline_: date): bool {
    do_require(now <= deadline_, "Transaction too old");
    return true
}

constant DEFAULT_AMOUNT_IN_CACHED: nat = 115_792_089_237_316_195_423_570_985_008_687_907_853_269_984_665_640_564_039_457_584_007_913_129_639_935

/// @dev Transient storage variable used for returning the computed amount in for an exact output swap.
variable amountInCached: nat = DEFAULT_AMOUNT_IN_CACHED

record SwapCallbackData {
    path_SwapCallbackData: bytes;
    payer_SwapCallbackData: address;
}

record transfer_destination {
  to_dest           : address;
  token_id_dest     : nat;
  token_amount_dest : nat
} as ((%to_, (token_id, amount)))

record transfer_param {
  tp_from : address;
  tp_txs  : list<transfer_destination>;
} as ((%from_, %txs))

entry tokenTransferFromTo(token: token_type, sender: address, recipient: address, amount: nat) {
    called by self_address
    effect {
        match token with
        | tez_token(tez_type) -> begin
            transfer ((amount * 1tz) div 1_000_000) to recipient
        end
        | fa12(fa12_type) -> begin
            transfer 0tz to fa12_type call %transfer<address * address * nat>((sender, recipient, amount));
        end
        | fa20(fa20_type_address, fa20_type_id) -> begin
            transfer 0tz to fa20_type_address call %transfer<list<transfer_param>>([{sender; [{recipient; fa20_type_id; amount}]}]);
        end
        end
    }
}

/// @inheritdoc IKodexV3SwapCallback
entry kodexV3SwapCallback(
    amount0Delta: int,
    amount1Delta: int,
    data_: bytes
) {
    // swaps entirely within 0-liquidity regions are not supported
    do_require((amount0Delta > 0) or (amount1Delta > 0), INVALID_OPERATION);
    // SwapCallbackData memory data = abi.decode(data_, (SwapCallbackData));
    const data: SwapCallbackData ?= unpack<SwapCallbackData>(data_) : INVALID_OPERATION;
    // (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();
    const decode_param ?= unpack<token_type * token_type * nat>(data.path_SwapCallbackData);
    var tokenIn_param: token_type = decode_param[0];
    const tokenOut_param: token_type = decode_param[1];
    const fee_param: nat = decode_param[2];

    const pool_param ?= call_view<address>(
        factory, 
        "computeAddress", 
        (tokenIn_param, tokenOut_param, fee_param)
    ): INVALID_OPERATION;
    do_require(caller = pool_param, INVALID_OPERATION);

    const compareIO: int ?= call_view<int>(kodexV3lib, "tokenCompare", (tokenIn_param, tokenOut_param)) : INVALID_OPERATION;
    // const isExactInput: bool = amount0Delta > 0 ? (tokenIn_param < tokenOut_param) : (tokenOut_param < tokenIn_param);
    const isExactInput: bool = amount0Delta > 0 ? (compareIO = (-1i)) : (compareIO = 1i);
    const amountToPay_int: int = amount0Delta > 0 ?  amount0Delta : amount1Delta;
    const amountToPay: nat ?= int_to_nat(amountToPay_int) : INVALID_OPERATION;
    if (isExactInput) then begin
        transfer 0tz to entry self.tokenTransferFromTo(tokenIn_param, data.payer_SwapCallbackData, caller, amountToPay)
        // transfer 0tz to tokenIn_param call %transfer<address * address * nat>((data.payer_SwapCallbackData, caller, amountToPay))
    end else begin
        tokenIn_param := tokenOut_param;
        transfer 0tz to entry self.tokenTransferFromTo(tokenIn_param, data.payer_SwapCallbackData, caller, amountToPay);
        // transfer 0tz to tokenIn_param call %transfer<address * address * nat>((data.payer_SwapCallbackData, caller, amountToPay));
        amountInCached := amountToPay
    end
}

entry exactInputSingle(param: ExactInputSingleParams)
{
    do_require(checkDeadline(param.deadline_InSParam), INVALID_OPERATION);
    
    const tokenIn_param: token_type = param.tokenIn_InSParam;
    const tokenOut_param: token_type = param.tokenOut_InSParam;
    const fee_param: nat = param.fee_InSParam;

    const compareIO: int ?= call_view<int>(kodexV3lib, "tokenCompare", (tokenIn_param, tokenOut_param)) : INVALID_OPERATION;
    // const zeroForOne: bool = tokenIn_param < tokenOut_param;
    const zeroForOne: bool = (compareIO = (-1i));
    const poolAddress ?= call_view<address>(factory, "computeAddress", (tokenIn_param, tokenOut_param, fee_param)) : INVALID_OPERATION;
    const sqrtPriceLimitX96_int: int = (param.sqrtPriceLimitX96_InSParam = 0) ? (zeroForOne ? (MIN_SQRT_RATIO + 1i) : (MAX_SQRT_RATIO - 1)) : param.sqrtPriceLimitX96_InSParam;
    const sqrtPriceLimitX96_nat: nat ?= int_to_nat(sqrtPriceLimitX96_int) : INVALID_OPERATION;
    const path_param: bytes = pack((param.tokenIn_InSParam, param.tokenOut_InSParam, param.fee_InSParam));
    const pack_data: SwapCallbackData = {path_param; caller};

    const retVal_swap ?= call_view<int * int>(poolAddress, "swap_view", (
        zeroForOne, 
        (param.amountIn_InSParam - 0), 
        sqrtPriceLimitX96_nat
        )
    ) : INVALID_OPERATION;
    transfer 0tz to poolAddress call swap<address * bool * int * nat * bytes>((
        param.recipient_InSParam, 
        zeroForOne, 
        (param.amountIn_InSParam - 0), 
        sqrtPriceLimitX96_nat,
        pack(pack_data)
    ));
    const amount0 = retVal_swap[0];
    const amount1 = retVal_swap[1];
    const amountOut_param ?= int_to_nat(-(zeroForOne ? amount1 : amount0)) : INVALID_OPERATION;
    do_require(amountOut_param >= param.amountOutMinimum_InSParam, "Too little received")
}

/// @inheritdoc ISwapRouter
entry exactOutputSingle(param: ExactOutputSingleParams)
{
    do_require(checkDeadline(param.deadline_OutSParam), INVALID_OPERATION);
    
    const tokenOut_param: token_type = param.tokenOut_OutSParam;
    const tokenIn_param: token_type = param.tokenIn_OutSParam;
    const fee_param: nat = param.fee_OutSParam;

    const compareIO: int ?= call_view<int>(kodexV3lib, "tokenCompare", (tokenIn_param, tokenOut_param)) : INVALID_OPERATION;
    // const zeroForOne: bool = (tokenIn_param < tokenOut_param);
    const zeroForOne: bool = (compareIO = (-1i));

    const path_param: bytes = pack((tokenOut_param, tokenIn_param, fee_param));
    const pack_data: SwapCallbackData = {path_param; caller};
    
    const poolAddress ?= call_view<address>(factory, "computeAddress", (tokenIn_param, tokenOut_param, fee_param)) : INVALID_OPERATION;
    const sqrtPriceLimitX96_int: int = (param.sqrtPriceLimitX96_OutSParam = 0) ? (zeroForOne ? (MIN_SQRT_RATIO + 1i) : (MAX_SQRT_RATIO - 1)) : param.sqrtPriceLimitX96_OutSParam;
    const sqrtPriceLimitX96_nat: nat ?= int_to_nat(sqrtPriceLimitX96_int) : INVALID_OPERATION;

    const retVal_swap ?= call_view<int * int>(poolAddress, "swap_view", (zeroForOne, -param.amountOut_OutSParam, sqrtPriceLimitX96_nat)) : INVALID_OPERATION;
    transfer 0tz to poolAddress call swap<address * bool * int * nat * bytes>((
        param.recipient_OutSParam, 
        zeroForOne, 
        -param.amountOut_OutSParam, 
        sqrtPriceLimitX96_nat,
        pack(pack_data)
    ));
    const amount0Delta = retVal_swap[0];
    const amount1Delta = retVal_swap[1];
    const amountIn_int = zeroForOne ? amount0Delta : amount1Delta;
    const amountIn: nat ?= int_to_nat(amountIn_int) : INVALID_OPERATION;
    const amountOutReceived_int: int = zeroForOne ? -amount1Delta : -amount0Delta;
    const amountOutReceived: nat ?= int_to_nat(amountOutReceived_int) : INVALID_OPERATION;
    // it's technically possible to not receive the full output amount,
    // so if no price limit has been specified, require this possibility away
    if (param.sqrtPriceLimitX96_OutSParam = 0) then 
        do_require(amountOutReceived = param.amountOut_OutSParam, INVALID_OPERATION);

    do_require(amountIn <= param.amountInMaximum_OutSParam, "Too much requested");
    // has to be reset even though we don't use it in the single hop case
    amountInCached := DEFAULT_AMOUNT_IN_CACHED
}
