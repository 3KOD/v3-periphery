archetype SwapRouter(const factory: address, const WETH9: address)


// import '@uniswap/v3-core/contracts/libraries/SafeCast.sol';
// import '@uniswap/v3-core/contracts/libraries/TickMath.sol';
// import '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';

// import './interfaces/ISwapRouter.sol';
// import './base/PeripheryImmutableState.sol';
// import './base/PeripheryValidation.sol';
// import './base/PeripheryPaymentsWithFee.sol';
// import './base/Multicall.sol';
// import './base/SelfPermit.sol';
// import './libraries/Path.sol';
// import './libraries/PoolAddress.sol';
// import './libraries/CallbackValidation.sol';
// import './interfaces/external/IWETH9.sol';

/// @title Uniswap V3 Swap Router
/// @notice Router for stateless execution of swaps against Uniswap V3

//     ISwapRouter,
// import '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';
    record ExactInputSingleParams {
        tokenIn: address;
        tokenOut: address;
        fee: nat;
        recipient: address;
        deadline: nat;
        amountIn: nat;
        amountOutMinimum: nat;
        sqrtPriceLimitX96: nat;
    }

    record ExactInputParams {
        path: bytes;
        recipient: address;
        deadline: nat;
        amountIn: nat;
        amountOutMinimum: nat;
    }

    record ExactOutputSingleParams {
        tokenIn: address;
        tokenOut: address;
        fee: nat;
        recipient: address;
        deadline: nat;
        amountOut: nat;
        amountInMaximum: nat;
        sqrtPriceLimitX96: nat;
    }

    record ExactOutputParams {
        path: bytes;
        recipient: address;
        deadline: nat;
        amountOut: nat;
        amountInMaximum: nat;
    }

//     PeripheryImmutableState,
//     PeripheryValidation,
    function checkDeadline(deadline: date): bool {
        // require {
        //     r: deadline >= now otherwise "TIME_OVER";
        // }
        return true
    }
//     PeripheryPaymentsWithFee,
// import '@openzeppelin/contracts/token/ERC20/IERC20.sol';
// import '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';

// import './PeripheryPayments.sol';
// import '@openzeppelin/contracts/token/ERC20/IERC20.sol';

// import '../interfaces/IPeripheryPayments.sol';
// import '../interfaces/external/IWETH9.sol';

// import '../libraries/TransferHelper.sol';

// import './PeripheryImmutableState.sol';

// abstract contract PeripheryPayments is IPeripheryPayments, PeripheryImmutableState {
    entry receive()
    //  external payable 
    {
        // require(msg.sender == WETH9, 'Not WETH9');
    }

    /// @inheritdoc IPeripheryPayments
    entry unwrapWETH9(amountMinimum: nat, recipient: address)
    //  public payable override 
    {
        // nat balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));
        // require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');

        // if (balanceWETH9 > 0) {
        //     IWETH9(WETH9).withdraw(balanceWETH9);
        //     TransferHelper.safeTransferETH(recipient, balanceWETH9);
        // }
    }

    /// @inheritdoc IPeripheryPayments
    entry sweepToken(
        token: address,
        amountMinimum: nat,
        recipient: address
    )
    //  public payable override 
    {
        // nat balanceToken = IERC20(token).balanceOf(address(this));
        // require(balanceToken >= amountMinimum, 'Insufficient token');

        // if (balanceToken > 0) {
        //     TransferHelper.safeTransfer(token, recipient, balanceToken);
        // }
    }

    /// @inheritdoc IPeripheryPayments
    entry refundETH() 
    // external payable override 
    {
        // if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance);
    }

    /// @param token The token to pay
    /// @param payer The entity that must pay
    /// @param recipient The entity that will receive payment
    /// @param value The amount to pay
    entry pay(
        token: address,
        payer: address,
        recipient: address,
        value: nat
    ) 
    // internal 
    {
        // if (token == WETH9 && address(this).balance >= value) {
        //     // pay with WETH9
        //     IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay
        //     IWETH9(WETH9).transfer(recipient, value);
        // } else if (payer == address(this)) {
        //     // pay with tokens already in the contract (for the exact input multihop case)
        //     TransferHelper.safeTransfer(token, recipient, value);
        // } else {
        //     // pull payment
        //     TransferHelper.safeTransferFrom(token, payer, recipient, value);
        // }
    }
// }

// import '../interfaces/IPeripheryPaymentsWithFee.sol';

// import '../interfaces/external/IWETH9.sol';
// import '../libraries/TransferHelper.sol';

// abstract contract PeripheryPaymentsWithFee is PeripheryPayments, IPeripheryPaymentsWithFee {
    // using LowGasSafeMath for nat;

    /// @inheritdoc IPeripheryPaymentsWithFee
    entry unwrapWETH9WithFee(
        amountMinimum: nat,
        recipient: address,
        feeBips: nat,
        feeRecipient: address
    ) 
    // public payable override 
    {
        // require(feeBips > 0 && feeBips <= 100);

        // nat balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));
        // require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');

        // if (balanceWETH9 > 0) {
        //     IWETH9(WETH9).withdraw(balanceWETH9);
        //     nat feeAmount = balanceWETH9.mul(feeBips) / 10_000;
        //     if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount);
        //     TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);
        // }
    }

    /// @inheritdoc IPeripheryPaymentsWithFee
    entry sweepTokenWithFee(
        token: address,
        amountMinimum: nat,
        recipient: address,
        feeBips: nat,
        feeRecipient: address
    ) 
    // public payable override 
    {
        // require(feeBips > 0 && feeBips <= 100);

        // nat balanceToken = IERC20(token).balanceOf(address(this));
        // require(balanceToken >= amountMinimum, 'Insufficient token');

        // if (balanceToken > 0) {
        //     nat feeAmount = balanceToken.mul(feeBips) / 10_000;
        //     if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount);
        //     TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount);
        // }
    }
//     Multicall,
//     SelfPermit
// {
    // using Path for bytes;
    // using SafeCast for nat;

    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap
    /// can never actually be this value
    constant DEFAULT_AMOUNT_IN_CACHED := type(Int).max;

    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.
    constant amountInCached = DEFAULT_AMOUNT_IN_CACHED;

    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.
    view getPool(
        tokenA: address,
        tokenB: address,
        fee: nat
    ) /* private view returns (IUniswapV3Pool) */ : IUniswapV3Pool {
        // return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));
    }

    record SwapCallbackData {
        path: bytes;
        payer: address;
    }

    /// @inheritdoc IUniswapV3SwapCallback
    entry uniswapV3SwapCallback(
        amount0Delta: int,
        amount1Delta: int,
        _data: bytes
    ) {
        // require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported
        // SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));
        // (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();
        // CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);

        // (bool isExactInput, nat amountToPay) =
        //     amount0Delta > 0
        //         ? (tokenIn < tokenOut, nat(amount0Delta))
        //         : (tokenOut < tokenIn, nat(amount1Delta));
        // if (isExactInput) {
        //     pay(tokenIn, data.payer, msg.sender, amountToPay);
        // } else {
        //     // either initiate the next swap or pay
        //     if (data.path.hasMultiplePools()) {
        //         data.path = data.path.skipToken();
        //         exactOutputInternal(amountToPay, msg.sender, 0, data);
        //     } else {
        //         amountInCached = amountToPay;
        //         tokenIn = tokenOut; // swap in/out because exact output swaps are reversed
        //         pay(tokenIn, data.payer, msg.sender, amountToPay);
        //     }
        // }
    }

    /// @dev Performs a single exact input swap
    getter exactInputInternal(
        amountIn: nat,
        recipient: address,
        sqrtPriceLimitX96: nat,
        data: SwapCallbackData
    ) /* private returns (nat amountOut) */ : nat {
        // allow swapping to the router address with address 0
        // if (recipient == address(0)) recipient = address(this);

        // (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();

        // bool zeroForOne = tokenIn < tokenOut;

        // (int256 amount0, int256 amount1) =
        //     getPool(tokenIn, tokenOut, fee).swap(
        //         recipient,
        //         zeroForOne,
        //         amountIn.toInt256(),
        //         sqrtPriceLimitX96 == 0
        //             ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)
        //             : sqrtPriceLimitX96,
        //         abi.encode(data)
        //     );

        // return nat(-(zeroForOne ? amount1 : amount0));
    }

    /// @inheritdoc ISwapRouter
    getter exactInputSingle(params: ExactInputSingleParams)
        // external
        // payable
        // override
        // checkDeadline(params.deadline)
        // returns (nat amountOut)
        : nat
    {
        // amountOut = exactInputInternal(
        //     params.amountIn,
        //     params.recipient,
        //     params.sqrtPriceLimitX96,
        //     SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender})
        // );
        // require(amountOut >= params.amountOutMinimum, 'Too little received');
    }

    /// @inheritdoc ISwapRouter
    getter exactInput(params: ExactInputParams)
        // external
        // payable
        // override
        // checkDeadline(params.deadline)
        // returns (nat amountOut)
        : nat
    {
        // address payer = msg.sender; // msg.sender pays for the first hop

        // while (true) {
        //     bool hasMultiplePools = params.path.hasMultiplePools();

        //     // the outputs of prior swaps become the inputs to subsequent ones
        //     params.amountIn = exactInputInternal(
        //         params.amountIn,
        //         hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies
        //         0,
        //         SwapCallbackData({
        //             path: params.path.getFirstPool(), // only the first pool in the path is necessary
        //             payer: payer
        //         })
        //     );

        //     // decide whether to continue or terminate
        //     if (hasMultiplePools) {
        //         payer = address(this); // at this point, the caller has paid
        //         params.path = params.path.skipToken();
        //     } else {
        //         amountOut = params.amountIn;
        //         break;
        //     }
        // }

        // require(amountOut >= params.amountOutMinimum, 'Too little received');
    }

    /// @dev Performs a single exact output swap
    getter exactOutputInternal(
        amountOut: nat,
        recipient: address,
        sqrtPriceLimitX96: nat,
        data: SwapCallbackData
    ) 
    // private returns (nat amountIn) 
    : nat
    {
        // allow swapping to the router address with address 0
        // if (recipient == address(0)) recipient = address(this);

        // (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool();

        // bool zeroForOne = tokenIn < tokenOut;

        // (int256 amount0Delta, int256 amount1Delta) =
        //     getPool(tokenIn, tokenOut, fee).swap(
        //         recipient,
        //         zeroForOne,
        //         -amountOut.toInt256(),
        //         sqrtPriceLimitX96 == 0
        //             ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)
        //             : sqrtPriceLimitX96,
        //         abi.encode(data)
        //     );

        // nat amountOutReceived;
        // (amountIn, amountOutReceived) = zeroForOne
        //     ? (nat(amount0Delta), nat(-amount1Delta))
        //     : (nat(amount1Delta), nat(-amount0Delta));
        // // it's technically possible to not receive the full output amount,
        // // so if no price limit has been specified, require this possibility away
        // if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut);
    }

    /// @inheritdoc ISwapRouter
    getter exactOutputSingle(params: ExactOutputSingleParams)
        // external
        // payable
        // override
        // checkDeadline(params.deadline)
        // returns (nat amountIn)
        : nat
    {
        // avoid an SLOAD by using the swap return data
        // amountIn = exactOutputInternal(
        //     params.amountOut,
        //     params.recipient,
        //     params.sqrtPriceLimitX96,
        //     SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender})
        // );

        // require(amountIn <= params.amountInMaximum, 'Too much requested');
        // // has to be reset even though we don't use it in the single hop case
        // amountInCached = DEFAULT_AMOUNT_IN_CACHED;
    }

    /// @inheritdoc ISwapRouter
    getter exactOutput(params: ExactOutputParams)
        // external
        // payable
        // override
        // checkDeadline(params.deadline)
        // returns (nat amountIn)
        : nat
    {
        // it's okay that the payer is fixed to msg.sender here, as they're only paying for the "final" exact output
        // swap, which happens first, and subsequent swaps are paid for within nested callback frames
        // exactOutputInternal(
        //     params.amountOut,
        //     params.recipient,
        //     0,
        //     SwapCallbackData({path: params.path, payer: msg.sender})
        // );

        // amountIn = amountInCached;
        // require(amountIn <= params.amountInMaximum, 'Too much requested');
        // amountInCached = DEFAULT_AMOUNT_IN_CACHED;
    }
