/// @title NFT positions
/// @notice Wraps Uniswap V3 positions in the FA2.0 non-fungible token interface
/// @dev The address of the token descriptor contract, which handles generating token URIs for position tokens
archetype NonfungiblePositionManager(
    const factory: address, 
    const tokenDescriptor: address, 
    const kodexV3lib: address, 
    owner : address, 
    permits : address
) with metadata ""

constant INVALID_OPERATION: string = "ERR"
constant Q96: nat = 1 <<| 96
constant Q128: nat = 1 <<| 128
constant MAX_UINT128: nat = 340282366920938463463374607431768211455

enum token_type = 
| tez_token<unit>
| fa12<address>
| fa20<address * nat>

// constant name = "Kodex V3 Positions NFT-V1";
// constant symbol = "KODOS";
// constant nameHash = keccak256(bytes(name));
// constant versionHash = keccak256(bytes(1));

/// @notice Emitted when liquidity is increased for a position NFT
/// @dev Also emitted when a token is minted
/// @param tokenId The ID of the token for which liquidity was increased
/// @param liquidity The amount by which liquidity for the NFT position was increased
/// @param amount0 The amount of token0 that was paid for the increase in liquidity
/// @param amount1 The amount of token1 that was paid for the increase in liquidity
event IncreaseLiquidity {
    tokenId_Inc: nat; // uint256
    liquidity_Inc: nat // uint128
    // amount0_Inc: nat; // uint256
    // amount1_Inc: nat // uint256
}

/// @notice Emitted when liquidity is decreased for a position NFT
/// @param tokenId The ID of the token for which liquidity was decreased
/// @param liquidity The amount by which liquidity for the NFT position was decreased
/// @param amount0 The amount of token0 that was accounted for the decrease in liquidity
/// @param amount1 The amount of token1 that was accounted for the decrease in liquidity
event DecreaseLiquidity {
    tokenId_Dec: nat; // uint256
    liquidity_Dec: nat; // uint128
    amount0_Dec: nat; // uint256
    amount1_Dec: nat // uint256
}

/// @notice Emitted when tokens are collected for a position NFT
/// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior
/// @param tokenId The ID of the token for which underlying tokens were collected
/// @param recipient The address of the account that received the collected tokens
/// @param amount0 The amount of token0 owed to the position that was collected
/// @param amount1 The amount of token1 owed to the position that was collected
event Collect{
    tokenId_Col: nat; // uint256
    recipient_Col: address; // address
    amount0_Col: nat; // uint256
    amount1_Col: nat // uint256
}

function checkDeadline(deadline: date): bool {
    do_require(now <= deadline, "Transaction too old");
    return true
}

/// @notice The identifying key of the pool
record PoolKey {
    token0_PoolKey: token_type;
    token1_PoolKey: token_type;
    fee_PoolKey: nat; // uint24
} as (((token0, token1), fee))

record MintCallbackData {
    poolKey_MintData: PoolKey;
    payer_MintData: address;
    amount0Min_MintData: nat;
    amount1Min_MintData: nat;
}

record AddLiquidityParams {
    token0: token_type; // address;
    token1: token_type; // address;
    fee: nat; // uint24;
    recipient: address; // address;
    tickLower: int; // int24;
    tickUpper: int; // int24;
    amount0Desired: nat; // uint256;
    amount1Desired: nat; // uint256;
    amount0Min: nat; // uint256;
    amount1Min: nat; // uint256;
}
    
// details about the uniswap position
record Position {
    // the nonce for permits
    // nonce_Pos: nat; // uint96;
    // the address that is approved for spending this token
    operator_Pos: address; // address;
    // the ID of the pool with which this token is connected
    poolId_Pos: nat; // uint80;
    // the tick range of the position
    tickLower_Pos: int; // int24;
    tickUpper_Pos: int; // int24;
    // the liquidity of the position
    liquidity_Pos: nat; // uint128;
    // the fee growth of the aggregate position as of the last action on the individual position
    feeGrowthInside0LastX128_Pos: nat; // uint256;
    feeGrowthInside1LastX128_Pos: nat; // uint256;
    // how many uncollected tokens are owed to the position, as of the last computation
    tokensOwed0_Pos: nat; // uint128;
    tokensOwed1_Pos: nat; // uint128;
}

/// @dev IDs of pools assigned by this contract
// mapping(address => uint80) private _poolIds;
asset poolIds identified by pool to big_map {
    pool: address;
    poolId: nat = 0;
}

/// @dev Pool keys by pool ID, to save on SSTOREs for position data
// mapping(uint80 => PoolAddress.PoolKey) private _poolIdToPoolKey;
asset poolIdToPoolKey identified by poolId_ to big_map {
    poolId_: nat;
    poolKey: PoolKey;
}

/// @dev The token ID position data
// mapping(uint256 => Position) private positions_;
asset positions_ identified by tokenId_ to big_map {
    tokenId_: nat;
    position_: Position;
}

/// @dev The ID of the next token that will be minted. Skips 0
variable nextId_: nat = 1 // uint176 private
/// @dev The ID of the next pool that is used for the first time. Skips 0
variable nextPoolId_: nat = 1 // uint80 private

/* OWNERSHIP TRANSFER ------------------------------------------------------- */

variable owner_candidate : option<address> = none

entry declare_ownership(candidate : address) {
  no transfer
  called by owner
  effect {
    owner_candidate := some(candidate);
  }
}

entry claim_ownership() {
  no transfer
  require {
    ownership_r1: (owner_candidate ? the = caller : false) otherwise "INVALID_CALLER"
  }
  effect {
    owner := caller;
    owner_candidate := none
  }
}

/*  PAUSABLE ----------------------------------------------------------------- */

variable paused : bool = false

function is_not_paused() : bool {
  do_fail_if(paused, "CONTRACT_PAUSED");
  return true
}

entry pause() {
  no transfer
  called by owner
  require {
    pausable_r1: is_not_paused()
  }
  effect {
    paused := true
  }
}

entry unpause() {
  no transfer
  called by owner
  require {
    pausable_r2: paused otherwise "CONTRACT_NOT_PAUSED"
  }
  effect {
    paused := false
  }
}

/* METADATA ---------------------------------------------------------------- */

entry set_metadata(k: string, d : option<bytes>) {
  no transfer
  called by owner
  require { md_r1 : is_not_paused() }
  effect {
    metadata.update(k, d)
  }
}

/* TOKEN METADATA ------------------------------------------------------------ */

asset token_metadata to big_map {
  ftoken_metadata : nat;
  token_id        : nat;
  token_info      : map<string, bytes>;
}

entry set_token_metadata (tid : nat, tdata: map<string, bytes>) {
  no transfer
  called by owner
  require { tmd_r1: is_not_paused() }
  effect {
    token_metadata.add_update(tid, { token_id = tid; token_info = tdata });
  }
}

/* PERMITS ----------------------------------------------------------------- */

entry set_permits(p : address) {
  no transfer
  called by owner
  require { p_r1 : is_not_paused() }
  effect {
    permits := p
  }
}

/* ERRORS ----------------------------------------------------------------- */

constant FA2_INSUFFICIENT_BALANCE : string = "FA2_INSUFFICIENT_BALANCE"
constant FA2_INVALID_AMOUNT       : string = "FA2_INVALID_AMOUNT"
constant FA2_NOT_OPERATOR         : string = "FA2_NOT_OPERATOR"
constant FA2_NOT_OWNER            : string = "FA2_NOT_OWNER"
constant FA2_TOKEN_UNDEFINED      : string = "FA2_TOKEN_UNDEFINED"
constant SIGNER_NOT_FROM          : string = "SIGNER_NOT_FROM"

/* PARAMETERS ------------------------------------------------------------- */

record transfer_destination {
  to_dest           : address;
  token_id_dest     : nat;
  token_amount_dest : nat
} as ((%to_, (token_id, amount)))

record transfer_param {
  tp_from : address;
  tp_txs  : list<transfer_destination>;
} as ((%from_, %txs))

/* STORAGE ---------------------------------------------------------------- */

asset ledger identified by ltokenid to big_map {
  ltokenid   : nat;
  lowner     : address;
}

record part {
  part_account : address;
  part_value   : nat;
}

asset operator identified by oaddr otoken oowner to big_map {
  oaddr       : address;
  otoken      : nat;
  oowner      : address;
}

asset operator_for_all identified by fa_oaddr fa_oowner to big_map {
  fa_oaddr    : address;
  fa_oowner   : address;
}

/* FUNCTIONS --------------------------------------------------------------- */

function get_from(txs : list<transfer_param>) : option<address> {
  match txs with
  | hd::tl -> begin
    const %from = hd.tp_from;
    for tx in tl do
      do_require(%from = tx.tp_from, FA2_NOT_OPERATOR)
    done;
    return some(%from)
  end
  | [] -> return none
  end
}

function check_operator(txs : list<transfer_param>) : bool {
  var res = true;
  for tx in txs do
    const %from = tx.tp_from;
    const tds = tx.tp_txs;
    for td in tds do begin
      res &=
        if caller <> %from then
          ((operator.contains((caller, td.token_id_dest, %from)) and (positions_[td.token_id_dest].position_.operator_Pos = caller)) or
           operator_for_all.contains((caller, %from)))
        else
          true;
    end
    done
  done;
  return res
}

/* ENTRYPOINTS ------------------------------------------------------------- */

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

enum update_op =
| add_operator<operator_param>
| remove_operator<operator_param>

entry update_operators (upl : list<update_op>) {
  no transfer
  require { fa2_r1 : is_not_paused() }
  effect {
    for up in upl do
      match up with
      | add_operator(param) -> (* add *)
        do_require(param.opp_owner = caller , FA2_NOT_OWNER);
        positions_[param.opp_token_id].position_ := {positions_[param.opp_token_id].position_ with operator_Pos = param.opp_operator};
        operator.put({param.opp_operator; param.opp_token_id; param.opp_owner})
      | remove_operator(param) -> (* remove *)
        do_require(param.opp_owner = caller , FA2_NOT_OWNER);
        positions_[param.opp_token_id].position_ := {positions_[param.opp_token_id].position_ with operator_Pos = self_address};
        operator.remove((param.opp_operator, param.opp_token_id, param.opp_owner))
      end;
    done;
  }
}

enum update_for_all_op =
| add_for_all<address>
| remove_for_all<address>

entry update_operators_for_all (upl : list<update_for_all_op>) {
  no transfer
  require { fa2_r2 : is_not_paused() }
  effect {
    for up in upl do
      match up with
      | add_for_all(op) ->
          operator_for_all.put({ op; caller })
      | remove_for_all(op) ->
          operator_for_all.remove((op, caller))
      end;
    done;
  }
}

entry do_transfer(txs : list<transfer_param>) {
  no transfer
  called by self_address
  effect {
    for tx in txs do
      const %from = tx.tp_from;
      const tds   = tx.tp_txs;
      for td in tds do begin
        const tokenid = td.token_id_dest;
        const towner ?= ledger[tokenid]?.lowner : FA2_TOKEN_UNDEFINED;
        if td.token_amount_dest > 0
        then begin
          do_require(towner = %from and td.token_amount_dest = 1, FA2_INSUFFICIENT_BALANCE);
          ledger.update(tokenid, { lowner = td.to_dest })
        end
      end done
    done
  }
}

record gasless_param {
  transfer_params : list<transfer_param>;
  user_pk         : key;
  user_sig        : signature
}

function check_owner(addr : address, txs : list<transfer_param>) : bool {
  var res = true;
  for tx in txs do
    res &= addr = tx.tp_from
  done;
  return res
}

entry transfer_gasless (batch : list<gasless_param>) {
  no transfer
  require { fa2_r3 : is_not_paused() }
  effect {
    for b in batch do
      const txs = b.transfer_params;
      const pk  = b.user_pk;
      const sig = b.user_sig;
      const pkh_signer = key_to_address(pk);
      do_require(check_owner(pkh_signer, txs), SIGNER_NOT_FROM);
      transfer 0tz to permits
        call check<key * signature * bytes>((pk, sig, blake2b(pack(txs))));
      transfer 0tz to entry self.do_transfer(txs);
    done
  }
}

entry %transfer (txs : list<transfer_param>) {
  no transfer
  require { fa2_r4 : is_not_paused() }
  effect {
    if not check_operator(txs) then begin
      match get_from(txs) with
      | some(%from) ->
        transfer 0tz to permits
          call consume<address * bytes * string>((%from, blake2b(pack(txs)), FA2_NOT_OPERATOR))
      | none -> ()
      end
    end;

    transfer 0tz to entry self.do_transfer(txs);
  }
}

/* GETTERS ----------------------------------------------------------------- */

record balance_of_request {
  bo_owner : address;
  btoken_id : nat;
} as ((owner, token_id))

record balance_of_response {
  request : balance_of_request;
  balance_ : nat;
} as ((request, balance))

function get_balance(br : balance_of_request) : nat {
  const token ?= ledger[br.btoken_id] : FA2_TOKEN_UNDEFINED;
  return (token.lowner = br.bo_owner ? 1 : 0)
}

getter balance_of (requests : list<balance_of_request>) : list<balance_of_response> {
  return map(requests, br -> {
    request = br;
    balance_ = get_balance(br)
  })
}

/* TZIP-017 One-step  ------------------------------------------------------ */

entry permit_transfer (txs : list<transfer_param>, permit : option<key * signature>) {
  no transfer
  require { fa2_r9 : is_not_paused() }
  effect {
    match permit with
    | some(p) -> begin
        const pk = p[0];
        const sig = p[1];
        const pkh_signer = key_to_address(pk);
        do_require(check_owner(pkh_signer, txs), SIGNER_NOT_FROM);
        transfer 0tz to permits
            call check<key * signature * bytes>((pk, sig, blake2b(pack(txs))));
        transfer 0tz to entry self.do_transfer(txs);
    end
    | none -> begin
      if not check_operator(txs) then begin
        match get_from(txs) with
        | some(%from) ->
          transfer 0tz to permits
            call consume<address * bytes * string>((%from, blake2b(pack(txs)), FA2_NOT_OPERATOR))
        | none -> ()
        end
      end;

      transfer 0tz to entry self.do_transfer(txs);
    end
    end
  }
}

entry tokenTransferFromTo(token: token_type, sender: address, recipient_: address, amount: nat) {
    called by self_address
    effect {
        match token with
        | tez_token(tez_type) -> begin
            const tezAmount = (amount * 1tz) div 1_000_000;
            do_require(transferred >= tezAmount, INVALID_OPERATION);
            transfer tezAmount to recipient_
        end
        | fa12(fa12_type) -> begin
            transfer 0tz to fa12_type call %transfer<address * address * nat>((sender, recipient_, amount));
        end
        | fa20(fa20_type_address, fa20_type_id) -> begin
            transfer 0tz to fa20_type_address call %transfer<list<transfer_param>>([{sender; [{recipient_; fa20_type_id; amount}]}]);
        end
        end
    }
}

/// @inheritdoc INonfungiblePositionManager
view positions(tokenId: nat) : address * token_type * token_type * nat * int * int * nat * nat * nat * nat * nat {
    const position: Position = positions_[tokenId].position_;
    do_require(position.poolId_Pos <> 0, "Invalid token ID");
    const poolKey_param: PoolKey = poolIdToPoolKey[position.poolId_Pos].poolKey;
    return ((
        // position.nonce_Pos,
        position.operator_Pos,
        poolKey_param.token0_PoolKey,
        poolKey_param.token1_PoolKey,
        poolKey_param.fee_PoolKey,
        position.tickLower_Pos,
        position.tickUpper_Pos,
        position.liquidity_Pos,
        position.feeGrowthInside0LastX128_Pos,
        position.feeGrowthInside1LastX128_Pos,
        position.tokensOwed0_Pos,
        position.tokensOwed1_Pos
    ))
}

record MintParams {
    token0_MintParams: token_type; // address
    token1_MintParams: token_type; // address
    fee_MintParams: nat; // uint24
    tickLower_MintParams: int; // int24
    tickUpper_MintParams: int; // int24
    amount0Desired_MintParams: nat; // uint256
    amount1Desired_MintParams: nat; // uint256
    amount0Min_MintParams: nat; // uint256
    amount1Min_MintParams: nat; // uint256
    recipient_MintParams: address; // address
    deadline_MintParams: date; // uint256
}

/// @inheritdoc IkodexV3PoolState
record Slot0 {
    // the current price
    sqrtPriceX96: nat;
    // the current tick
    tick: int;
    // the most-recently updated index of the observations array
    observationIndex: nat;
    // the current maximum number of observations that are being stored
    observationCardinality: nat;
    // the next maximum number of observations to store, triggered in observations.write
    observationCardinalityNext: nat;
    // the current protocol fee as a percentage of the swap fee taken on withdrawal
    // represented as an integer denominator (1/x)%
    feeProtocol: nat;
    // whether the pool is locked
    unlocked: bool;
}

/// @notice Computes the amount of liquidity received for a given amount of token0 and price range
/// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower))
/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
/// @param amount0 The amount0 being sent in
/// @return liquidity The amount of returned liquidity
view getLiquidityForAmount0(
    sqrtRatioAX96: nat,
    sqrtRatioBX96: nat,
    amount0: nat
) : nat {
    var sqrtRatioAX96_param = sqrtRatioAX96;
    var sqrtRatioBX96_param = sqrtRatioBX96;
    if (sqrtRatioAX96 > sqrtRatioBX96) then begin
        sqrtRatioAX96_param := sqrtRatioBX96; 
        sqrtRatioBX96_param := sqrtRatioAX96;
    end;
    const intermediate = sqrtRatioAX96_param * sqrtRatioBX96_param div Q96;
    const div_Val ?= int_to_nat(sqrtRatioBX96_param - sqrtRatioAX96_param) : INVALID_OPERATION;
    return (amount0 * intermediate div div_Val)
}

/// @notice Computes the amount of liquidity received for a given amount of token1 and price range
/// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).
/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
/// @param amount1 The amount1 being sent in
/// @return liquidity The amount of returned liquidity
view getLiquidityForAmount1(
    sqrtRatioAX96: nat,
    sqrtRatioBX96: nat,
    amount1: nat
) : nat {
    var sqrtRatioAX96_param: nat = sqrtRatioAX96;
    var sqrtRatioBX96_param: nat = sqrtRatioBX96;
    if (sqrtRatioAX96 > sqrtRatioBX96) then begin
        sqrtRatioAX96_param := sqrtRatioBX96; 
        sqrtRatioBX96_param := sqrtRatioAX96;
    end;
    const div_Val ?= int_to_nat(sqrtRatioBX96_param - sqrtRatioAX96_param) : "PERROR12";
    return (amount1 * Q96 div div_Val)
}

/// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current
/// pool prices and the prices at the tick boundaries
/// @param sqrtRatioX96 A sqrt price representing the current pool prices
/// @param sqrtRatioAX96 A sqrt price representing the first tick boundary
/// @param sqrtRatioBX96 A sqrt price representing the second tick boundary
/// @param amount0 The amount of token0 being sent in
/// @param amount1 The amount of token1 being sent in
/// @return liquidity The maximum amount of liquidity received
function getLiquidityForAmounts(
    sqrtRatioX96: nat,
    sqrtRatioAX96: nat,
    sqrtRatioBX96: nat,
    amount0: nat,
    amount1: nat
) : nat {
    var sqrtRatioAX96_param = sqrtRatioAX96;
    var sqrtRatioBX96_param = sqrtRatioBX96;
    if (sqrtRatioAX96 > sqrtRatioBX96) then begin
        sqrtRatioAX96_param := sqrtRatioBX96; 
        sqrtRatioBX96_param := sqrtRatioAX96;
    end;

    if (sqrtRatioX96 <= sqrtRatioAX96_param) then begin
        const retVal ?= call_view<nat>(self_address, "getLiquidityForAmount0", (sqrtRatioAX96_param, sqrtRatioBX96_param, amount0)): "PERROR8";
        return retVal
    end else if (sqrtRatioX96 < sqrtRatioBX96_param) then begin
        const liquidity0 ?= call_view<nat>(self_address, "getLiquidityForAmount0", (sqrtRatioX96, sqrtRatioBX96_param, amount0)): "PERROR9";
        const liquidity1 ?= call_view<nat>(self_address, "getLiquidityForAmount1", (sqrtRatioAX96_param, sqrtRatioX96, amount1)): "PERROR10";

        const retVal = (liquidity0 < liquidity1) ? liquidity0 : liquidity1;
        return retVal
    end else begin        
        const retVal ?= call_view<nat>(self_address, "getLiquidityForAmount1", (sqrtRatioAX96_param, sqrtRatioBX96_param, amount1)): "PERROR11";
        return retVal
    end
}

record PositionInfo {
    // the amount of liquidity owned by this position
    liquidity_PosInfo: nat;
    // fee growth per unit of liquidity as of the last update to liquidity or fees owed
    feeGrowthInside0LastX128_PosInfo: nat;
    feeGrowthInside1LastX128_PosInfo: nat;
    // the fees owed to the position owner in token0/token1
    tokensOwed0_PosInfo: nat;
    tokensOwed1_PosInfo: nat;
} as ((liquidity, (feeGrowthInside0LastX128, feeGrowthInside1LastX128), (tokensOwed0, tokensOwed1)))

/// @inheritdoc INonfungiblePositionManager
entry mint(param: MintParams) {
    do_require(checkDeadline(param.deadline_MintParams), "PERROR1");

    // /// @notice Add liquidity to an initialized pool
    const poolKey_param: PoolKey = {param.token0_MintParams; param.token1_MintParams; param.fee_MintParams};

    const pool_param ?= call_view<address>(
        factory, 
        "computeAddress", 
        (poolKey_param.token0_PoolKey, poolKey_param.token1_PoolKey, poolKey_param.fee_PoolKey)
    ): "PERROR2";

    // compute the liquidity amount
    const slot0_val ?= call_view<Slot0>(pool_param, "getSlot0", Unit): "PERROR3";
    const sqrtPriceX96_param = slot0_val.sqrtPriceX96;
    const sqrtRatioAX96 ?= call_view<nat>(kodexV3lib, "tickMathGetSqrtRatioAtTick", param.tickLower_MintParams): "PERROR4";
    const sqrtRatioBX96 ?= call_view<nat>(kodexV3lib, "tickMathGetSqrtRatioAtTick", param.tickUpper_MintParams): "PERROR5";

    const liquidity: nat = getLiquidityForAmounts(
        sqrtPriceX96_param,
        sqrtRatioAX96,
        sqrtRatioBX96,
        param.amount0Desired_MintParams,
        param.amount1Desired_MintParams
    );

    // this action is performed in mint of pool contract
    // require((amount0 >= params.amount0Min) and (amount1 >= params.amount1Min), "Price slippage check");
    const positionInfo_param ?= call_view<PositionInfo>(
        pool_param,
        "mint_burn_PositionInfo_view",
        (true, self_address, param.tickLower_MintParams, param.tickUpper_MintParams, liquidity)
    ): "PERROR6";

    const pack_data: MintCallbackData = {poolKey_param; caller; param.amount0Min_MintParams; param.amount1Min_MintParams};
    transfer transferred to pool_param call mint<address * int * int * nat * bytes>((
        self_address,
        param.tickLower_MintParams,
        param.tickUpper_MintParams,
        liquidity,
        pack(pack_data)));

    const tokenId = nextId_;
    nextId_ += 1;
    do_require(is_not_paused(), "PERROR7");
    ledger.add({ ltokenid = tokenId; lowner = param.recipient_MintParams });

    const feeGrowthInside0LastX128_param: nat = positionInfo_param.feeGrowthInside0LastX128_PosInfo;
    const feeGrowthInside1LastX128_param: nat = positionInfo_param.feeGrowthInside1LastX128_PosInfo;

    // idempotent set
    /// @dev Caches a pool key
    var poolId_param: nat = poolIds[pool_param] ? the.poolId : 0;
    if (poolId_param = 0) then begin
        poolId_param := nextPoolId_;
        nextPoolId_ += 1;
        poolIds[pool_param].poolId := poolId_param;
        poolIdToPoolKey[poolId_param].poolKey := {param.token0_MintParams; param.token1_MintParams; param.fee_MintParams};
    end;

    positions_[tokenId].position_ := {
        // 0;
        // address(0);
        self_address; // TODO+
        poolId_param;
        param.tickLower_MintParams;
        param.tickUpper_MintParams;
        liquidity;
        feeGrowthInside0LastX128_param;
        feeGrowthInside1LastX128_param;
        0;
        0
    };

    emit<IncreaseLiquidity>({tokenId; liquidity})
}

function isAuthorizedForToken(tokenId: nat) : bool {
    const isApprovedOrOwner: bool = (ledger[tokenId].lowner = caller) or 
        (operator.contains((caller, tokenId, ledger[tokenId].lowner))) or 
        (operator_for_all.contains((caller, ledger[tokenId].lowner)));
    do_require(isApprovedOrOwner, "Not approved");
    return true
}

view tokenURI(tokenId: nat) : bytes
{
    do_require(is_some(ledger[tokenId]?.lowner), FA2_TOKEN_UNDEFINED);
    const retVal ?= call_view<bytes>(tokenDescriptor, "tokenURI", (self_address, tokenId));
    return retVal
}

// save bytecode by removing implementation of unused method
view baseURI() : string {
    return ""
}

record IncreaseLiquidityParams {
    tokenId_IncLp: nat; // uint256
    amount0Desired_IncLp: nat; // uint256
    amount1Desired_IncLp: nat; // uint256
    amount0Min_IncLp: nat; // uint256
    amount1Min_IncLp: nat; // uint256
    deadline_IncLp: date; // uint256
}

/// @inheritdoc INonfungiblePositionManager
entry increaseLiquidity(param: IncreaseLiquidityParams) {
    do_require(checkDeadline(param.deadline_IncLp), INVALID_OPERATION);
    // This is storage, so, it shold be stored again.
    var position: Position = positions_[param.tokenId_IncLp].position_;
    // PoolAddress.PoolKey memory poolKey = poolIdToPoolKey[position.poolId];
    const poolKey_param: PoolKey = poolIdToPoolKey[position.poolId_Pos].poolKey;

    const pool_param ?= call_view<address>(
        factory, 
        "computeAddress", 
        (poolKey_param.token0_PoolKey, poolKey_param.token1_PoolKey, poolKey_param.fee_PoolKey)
    ): INVALID_OPERATION;

    const slot0_val ?= call_view<Slot0>(pool_param, "getSlot0", Unit): INVALID_OPERATION;
    const sqrtPriceX96_param = slot0_val.sqrtPriceX96;
    const sqrtRatioAX96 ?= call_view<nat>(kodexV3lib, "tickMathGetSqrtRatioAtTick", position.tickLower_Pos): INVALID_OPERATION;
    const sqrtRatioBX96 ?= call_view<nat>(kodexV3lib, "tickMathGetSqrtRatioAtTick", position.tickUpper_Pos): INVALID_OPERATION;

    const liquidity: nat = getLiquidityForAmounts(
        sqrtPriceX96_param,
        sqrtRatioAX96,
        sqrtRatioBX96,
        param.amount0Desired_IncLp,
        param.amount1Desired_IncLp
    );

    const positionInfo_param ?= call_view<PositionInfo>(
        pool_param,
        "mint_burn_PositionInfo_view",
        (true, self_address, position.tickLower_Pos, position.tickUpper_Pos, liquidity)
    ): INVALID_OPERATION;
    const pack_data: MintCallbackData = {poolKey_param; caller; param.amount0Min_IncLp; param.amount1Min_IncLp};
    transfer transferred to pool_param call mint<address * int * int * nat * bytes>((
        self_address,
        position.tickLower_Pos,
        position.tickUpper_Pos,
        liquidity,
        pack(pack_data)
    ));

    const tokenId = nextId_;
    nextId_ += 1;
    do_require(is_not_paused(), INVALID_OPERATION);
    ledger.add({ ltokenid = tokenId; lowner = self_address });

    // this is now updated to the current transaction
    const feeGrowthInside0LastX128_param: nat = positionInfo_param.feeGrowthInside0LastX128_PosInfo;
    const feeGrowthInside1LastX128_param: nat = positionInfo_param.feeGrowthInside1LastX128_PosInfo;

    const owed0_param: nat ?= int_to_nat(feeGrowthInside0LastX128_param - position.feeGrowthInside0LastX128_Pos): INVALID_OPERATION;
    position.tokensOwed0_Pos += owed0_param * position.liquidity_Pos div Q128;
    const owed1_param: nat ?= int_to_nat(feeGrowthInside1LastX128_param - position.feeGrowthInside1LastX128_Pos): INVALID_OPERATION;
    position.tokensOwed1_Pos += owed1_param * position.liquidity_Pos div Q128;

    position.feeGrowthInside0LastX128_Pos := feeGrowthInside0LastX128_param;
    position.feeGrowthInside1LastX128_Pos := feeGrowthInside1LastX128_param;
    position.liquidity_Pos += liquidity;

    // This is storage, so, it is stored here again.
    positions_[param.tokenId_IncLp].position_ := position;

    emit<IncreaseLiquidity>({param.tokenId_IncLp; liquidity})
}

record DecreaseLiquidityParams {
    tokenId_DecLp: nat; // uint256;
    liquidity_DecLp: nat; // uint128;
    amount0Min_DecLp: nat; // uint256;
    amount1Min_DecLp: nat; // uint256;
    deadline_DecLp: date; // uint256;
}

/// @inheritdoc INonfungiblePositionManager
entry decreaseLiquidity(param: DecreaseLiquidityParams) {
    no transfer
    effect {
        do_require(checkDeadline(param.deadline_DecLp), INVALID_OPERATION);
        do_require(isAuthorizedForToken(param.tokenId_DecLp), INVALID_OPERATION);
        do_require(param.liquidity_DecLp > 0, INVALID_OPERATION);
        // This is storage, so, it shold be stored again.
        const position: Position = positions_[param.tokenId_DecLp].position_;

        const positionLiquidity = position.liquidity_Pos;
        do_require(positionLiquidity >= param.liquidity_DecLp, INVALID_OPERATION);

        const poolKey_param: PoolKey = poolIdToPoolKey[position.poolId_Pos].poolKey;
        const pool_param ?= call_view<address>(
            factory, 
            "computeAddress", 
            (poolKey_param.token0_PoolKey, poolKey_param.token1_PoolKey, poolKey_param.fee_PoolKey)
        ): INVALID_OPERATION;
        

        // guess return values
        const retVal_burn ?= call_view<nat * nat>(kodexV3lib, "burn", (position.tickLower_Pos, position.tickUpper_Pos, param.liquidity_DecLp, pool_param)): INVALID_OPERATION;
        const amount0 = retVal_burn[0];
        const amount1 = retVal_burn[1];

        const positionInfo_param ?= call_view<PositionInfo>(
            pool_param,
            "mint_burn_PositionInfo_view",
            (false, self_address, position.tickLower_Pos, position.tickUpper_Pos, param.liquidity_DecLp)
        ): INVALID_OPERATION;

        transfer 0tz to pool_param call burn<int * int * nat>((position.tickLower_Pos, position.tickUpper_Pos, param.liquidity_DecLp));
        do_require((amount0 >= param.amount0Min_DecLp) and (amount1 >= param.amount1Min_DecLp), "Price slippage check");

        const feeGrowthInside0LastX128_param: nat = positionInfo_param.feeGrowthInside0LastX128_PosInfo;
        const feeGrowthInside1LastX128_param: nat = positionInfo_param.feeGrowthInside1LastX128_PosInfo;

        const owed0: nat ?= int_to_nat(feeGrowthInside0LastX128_param - position.feeGrowthInside0LastX128_Pos) : INVALID_OPERATION;

        position.tokensOwed0_Pos += (amount0 + owed0 * positionLiquidity div Q128);
        const owed1: nat ?= int_to_nat(feeGrowthInside1LastX128_param - position.feeGrowthInside1LastX128_Pos) : INVALID_OPERATION;
        position.tokensOwed1_Pos += (amount1 + owed1 * positionLiquidity div Q128);

        position.feeGrowthInside0LastX128_Pos := feeGrowthInside0LastX128_param;
        position.feeGrowthInside1LastX128_Pos := feeGrowthInside1LastX128_param;
        // subtraction is safe because we checked positionLiquidity is gte param.liquidity
        position.liquidity_Pos ?:= int_to_nat(positionLiquidity - param.liquidity_DecLp) : INVALID_OPERATION;

        // This is storage, so, it is stored here again.
        positions_[param.tokenId_DecLp].position_ := position;

        emit<DecreaseLiquidity>({param.tokenId_DecLp; param.liquidity_DecLp; amount0; amount1})
    }
}

record CollectParams {
    tokenId_CollectParam: nat; // uint256;
    recipient_CollectParam: address; // address;
    amount0Max_CollectParam: nat; // uint128;
    amount1Max_CollectParam: nat; // uint128;
}

/// @inheritdoc INonfungiblePositionManager
entry collect(param: CollectParams) {
    no transfer
    effect {
        do_require(isAuthorizedForToken(param.tokenId_CollectParam), INVALID_OPERATION);
        do_require((param.amount0Max_CollectParam > 0) or (param.amount1Max_CollectParam > 0), INVALID_OPERATION);
        // allow collecting to the nft position manager address with address 0
        // address recipient = param.recipient == address(0) ? address(this) : param.recipient;
        var recipient_param: address = param.recipient_CollectParam;

        // Position storage position = positions_[param.tokenId_CollectParam];
        // This is storage, so, it shold be stored again.
        const position: Position = positions_[param.tokenId_CollectParam].position_;

        const poolKey_param: PoolKey = poolIdToPoolKey[position.poolId_Pos].poolKey;

        const pool_param ?= call_view<address>(
            factory, 
            "computeAddress", 
            (poolKey_param.token0_PoolKey, poolKey_param.token1_PoolKey, poolKey_param.fee_PoolKey)
        ): INVALID_OPERATION;

        var tokensOwed0 = position.tokensOwed0_Pos;
        var tokensOwed1 = position.tokensOwed1_Pos;

        // trigger an update of the position fees owed and fee growth snapshots if it has any liquidity
        if (position.liquidity_Pos > 0) then begin
            const positionInfo_param ?= call_view<PositionInfo>(
                pool_param,
                "mint_burn_PositionInfo_view",
                (false, self_address, position.tickLower_Pos, position.tickUpper_Pos, 0)
            ): INVALID_OPERATION;
            transfer 0tz to pool_param call burn<int * int * nat>((position.tickLower_Pos, position.tickUpper_Pos, 0));
            const feeGrowthInside0LastX128_param: nat = positionInfo_param.feeGrowthInside0LastX128_PosInfo;
            const feeGrowthInside1LastX128_param: nat = positionInfo_param.feeGrowthInside1LastX128_PosInfo;
            const owed0: nat ?= int_to_nat(feeGrowthInside0LastX128_param - position.feeGrowthInside0LastX128_Pos) : INVALID_OPERATION;
            tokensOwed0 += owed0 * position.liquidity_Pos div Q128;
            const owed1: nat ?= int_to_nat(feeGrowthInside1LastX128_param - position.feeGrowthInside1LastX128_Pos) : INVALID_OPERATION;
            tokensOwed1 += owed1 * position.liquidity_Pos div Q128;

            position.feeGrowthInside0LastX128_Pos := feeGrowthInside0LastX128_param;
            position.feeGrowthInside1LastX128_Pos := feeGrowthInside1LastX128_param
        end;

        // compute the arguments to give to the pool#collect method
        const amount0Collect: nat = (param.amount1Max_CollectParam > tokensOwed1) ? tokensOwed1 : param.amount1Max_CollectParam;
        const amount1Collect: nat = (param.amount1Max_CollectParam > tokensOwed1) ? tokensOwed1 : param.amount1Max_CollectParam;

        // the actual amounts collected are returned
        transfer 0tz to pool_param call collect<address * int * int * nat * nat>((
            recipient_param,
            position.tickLower_Pos,
            position.tickUpper_Pos,
            amount0Collect,
            amount1Collect
        ));

        // sometimes there will be a few less wei than expected due to rounding down in core, but we just subtract the full amount expected
        // instead of the actual amount so we can burn the token

        var tokenOwed0Sub: int = tokensOwed0 - amount0Collect;
        var tokenOwed1Sub: int = tokensOwed1 - amount1Collect;
        if tokenOwed0Sub < 0 then begin
            tokenOwed0Sub := MAX_UINT128 - tokenOwed0Sub + 1; 
        end;

        if tokenOwed1Sub < 0 then begin
            tokenOwed1Sub := MAX_UINT128 - tokenOwed1Sub + 1; 
        end;
        
        // position.tokensOwed0_Pos ?:= int_to_nat(tokensOwed0 - amount0Collect) : INVALID_OPERATION;
        position.tokensOwed0_Pos ?:= int_to_nat(tokenOwed0Sub) : INVALID_OPERATION;

        // position.tokensOwed1_Pos ?:= int_to_nat(tokensOwed1 - amount1Collect) : INVALID_OPERATION;
        position.tokensOwed1_Pos ?:= int_to_nat(tokenOwed1Sub) : INVALID_OPERATION;

        // This is storage, so, it is stored here again.
        positions_[param.tokenId_CollectParam].position_ := position;

        emit<Collect>({param.tokenId_CollectParam; recipient_param; amount0Collect; amount1Collect});
    }
}

/// @inheritdoc INonfungiblePositionManager
entry burn(tokenId: nat) {
    no transfer
    effect {
        do_require(isAuthorizedForToken(tokenId), INVALID_OPERATION);
        // This is storage, so, it shold be stored again.
        // Position storage position = positions_[tokenId];
        const position: Position = positions_[tokenId].position_;
        do_require((position.liquidity_Pos = 0) and (position.tokensOwed0_Pos = 0) and (position.tokensOwed1_Pos = 0), "Not cleared");
        // This is storage, so, it is stored here again.
        // delete positions_[tokenId];
        positions_.remove(tokenId);

        const token_owner ?= ledger[tokenId]?.lowner : FA2_TOKEN_UNDEFINED;
        do_require(is_not_paused(), INVALID_OPERATION);
        do_require(token_owner = caller, FA2_NOT_OWNER);
        ledger.remove(tokenId);
        token_metadata.remove(tokenId)
    }
}
/// @inheritdoc IPoolInitializer
entry initializePoolIfNecessary(
    token0_param: token_type,
    token1_param: token_type,
    fee_param: nat,
    sqrtPriceX96_param: nat
) {
    no transfer
    effect {
        // do_require(token0_param < token1_param, INVALID_OPERATION);
        const pool_param: address ?= call_view<address>(factory, "computeAddress", (token0_param, token1_param, fee_param)): INVALID_OPERATION;
        const slot0_param ?= call_view<Slot0>(pool_param, "getSlot0", Unit) : INVALID_OPERATION;
        if (slot0_param.sqrtPriceX96 = 0) then 
            transfer 0tz to pool_param call initialize< nat>(sqrtPriceX96_param)
    }
}

entry createPoolIfNecessary(
    token0_param: token_type,
    token1_param: token_type,
    fee_param: nat
) {
    no transfer
    effect {
        // do_require(token0_param < token1_param, "token0 > token1");
        // const pool_param: option<address> = call_view<address>(factory, "computeAddress", (token0_param, token1_param, fee_param));

        // if (is_none(pool_param)) then
        transfer 0tz to factory call createPool<token_type * token_type * nat>((token0_param, token1_param, fee_param))
    }
}

/// @inheritdoc IERC721
view getApproved(tokenId: nat) : address {
    do_require(is_some(ledger[tokenId]?.lowner), FA2_TOKEN_UNDEFINED);
    do_require(operator.contains((positions_[tokenId].position_.operator_Pos, tokenId, ledger[tokenId].lowner)), INVALID_OPERATION);

    return positions_[tokenId].position_.operator_Pos
}

entry kodexV3MintCallback(
    /* uint256 */ amount0Owed: nat,
    /* uint256 */ amount1Owed: nat,
    /* bytes */ data: bytes
) {
    const decoded : MintCallbackData ?= unpack<MintCallbackData>(data) : INVALID_OPERATION;
    const pool_param ?= call_view<address>(factory, "computeAddress", (
        decoded.poolKey_MintData.token0_PoolKey, 
        decoded.poolKey_MintData.token1_PoolKey, 
        decoded.poolKey_MintData.fee_PoolKey
    )): INVALID_OPERATION;
    do_require(caller = pool_param, INVALID_OPERATION);

    if (amount0Owed > 0) then 
        transfer transferred to entry self.tokenTransferFromTo(decoded.poolKey_MintData.token0_PoolKey, decoded.payer_MintData, caller, amount0Owed);
        // transfer 0tz to decoded.poolKey_MintData.token0_PoolKey call %transfer<address * address * nat>((decoded.payer_MintData, caller, amount0Owed));
    if (amount1Owed > 0) then 
        transfer transferred to entry self.tokenTransferFromTo(decoded.poolKey_MintData.token1_PoolKey, decoded.payer_MintData, caller, amount1Owed);
        // transfer 0tz to decoded.poolKey_MintData.token1_PoolKey call %transfer<address * address * nat>((decoded.payer_MintData, caller, amount1Owed));

    do_require((amount0Owed >= decoded.amount0Min_MintData) and (amount1Owed >= decoded.amount1Min_MintData), "Price slippage check")
}
