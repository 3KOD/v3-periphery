/// @title NFT positions
/// @notice Wraps Uniswap V3 positions in the ERC721 non-fungible token interface
archetype NonfungiblePositionManager(
    const tokenDescriptor___: address, 
    const factory: address, 
    const WETH9: address
)// pragma solidity =0.7.6;
// pragma abicoder v2;

// import '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';
// import '@uniswap/v3-core/contracts/libraries/FixedPoint128.sol';
// import '@uniswap/v3-core/contracts/libraries/FullMath.sol';

// import './interfaces/INonfungiblePositionManager.sol';
// import './interfaces/INonfungibleTokenPositionDescriptor.sol';
// import './libraries/PositionKey.sol';
// import './libraries/PoolAddress.sol';
// import './base/LiquidityManagement.sol';
// import './base/PeripheryImmutableState.sol';
// import './base/Multicall.sol';
// import './base/ERC721Permit.sol';
// import './base/PeripheryValidation.sol';
// import './base/SelfPermit.sol';
// import './base/PoolInitializer.sol';

constant name = "Uniswap V3 Positions NFT-V1";
constant symbol = "UNI-V3-POS";
constant nameHash = keccak256(bytes(name));
constant versionHash = keccak256(bytes(1));
//     INonfungiblePositionManager,
//     Multicall,
//     ERC721Permit,
//     PeripheryImmutableState,
//     PoolInitializer,
//     LiquidityManagement,
//     PeripheryValidation,
//     SelfPermit
// {
    // details about the uniswap position
    record Position {
        // the nonce for permits
        nat nonce;
        // the address that is approved for spending this token
        address operator;
        // the ID of the pool with which this token is connected
        nat poolId;
        // the tick range of the position
        int tickLower;
        int tickUpper;
        // the liquidity of the position
        nat liquidity;
        // the fee growth of the aggregate position as of the last action on the individual position
        nat feeGrowthInside0LastX128;
        nat feeGrowthInside1LastX128;
        // how many uncollected tokens are owed to the position, as of the last computation
        nat tokensOwed0;
        nat tokensOwed1;
    }

    /// @dev IDs of pools assigned by this contract
    asset _poolIds identified by pool to big_map {
        pool: address;
        poolId: nat = 0;
    }

    /// @dev Pool keys by pool ID, to save on SSTOREs for position data
    asset _poolIdToPoolKey identified by _poolId to big_map {
        _poolId: nat;
        poolKey: PoolAddress.PoolKey;
    }

    /// @dev The token ID position data
    asset _positions identified by _tokenId to big_map {
        _tokenId: nat;
        _position: Position;
    }
    // mapping(nat => Position) private _positions;

    /// @dev The ID of the next token that will be minted. Skips 0
    variable _nextId: nat = 1;
    /// @dev The ID of the next pool that is used for the first time. Skips 0
    variable _nextPoolId: nat = 1;

    /// @dev The address of the token descriptor contract, which handles generating token URIs for position tokens
    // address private immutable tokenDescriptor___;

    // constructor(
    //     address _factory,
    //     address _WETH9,
    //     address tokenDescriptor____
    // ) ERC721Permit('Uniswap V3 Positions NFT-V1', 'UNI-V3-POS', '1') PeripheryImmutableState(_factory, _WETH9) {
    //     tokenDescriptor___ = tokenDescriptor____;
    // }

    /// @inheritdoc INonfungiblePositionManager
    view positions(tokenId: nat)
        // external
        // view
        // override
        : (
            /* nonce: */ nat,
            /* operator: */ address,
            /* token0: */ address,
            /* token1: */ address,
            /* fee: */ nat,
            /* tickLower: */ int,
            /* tickUpper: */ int,
            /* liquidity: */ nat,
            /* feeGrowthInside0LastX128: */ nat,
            /* feeGrowthInside1LastX128: */ nat,
            /* tokensOwed0: */ nat,
            /* tokensOwed1: */ nat
        )
    {
        // Position memory position = _positions[tokenId];
        // require(position.poolId != 0, 'Invalid token ID');
        // PoolAddress.PoolKey memory poolKey = _poolIdToPoolKey[position.poolId];
        // return (
        //     position.nonce,
        //     position.operator,
        //     poolKey.token0,
        //     poolKey.token1,
        //     poolKey.fee,
        //     position.tickLower,
        //     position.tickUpper,
        //     position.liquidity,
        //     position.feeGrowthInside0LastX128,
        //     position.feeGrowthInside1LastX128,
        //     position.tokensOwed0,
        //     position.tokensOwed1
        // );
    }

    /// @dev Caches a pool key
    getter cachePoolKey(pool: address, poolKey: PoolAddress.PoolKey) 
    private returns 
    : nat /* poolId */ {
        // poolId = _poolIds[pool];
        // if (poolId == 0) {
        //     _poolIds[pool] = (poolId = _nextPoolId++);
        //     _poolIdToPoolKey[poolId] = poolKey;
        // }
    }

    /// @inheritdoc INonfungiblePositionManager
    getter mint(params: MintParams)
        // external
        // payable
        // override
        // checkDeadline(params.deadline)
        // returns 
        (
            nat /* tokenId */,
            nat /* liquidity */,
            nat /* amount0 */,
            nat /* amount1 */
        )
    {
        // IUniswapV3Pool pool;
        // (liquidity, amount0, amount1, pool) = addLiquidity(
        //     AddLiquidityParams({
        //         token0: params.token0,
        //         token1: params.token1,
        //         fee: params.fee,
        //         recipient: address(this),
        //         tickLower: params.tickLower,
        //         tickUpper: params.tickUpper,
        //         amount0Desired: params.amount0Desired,
        //         amount1Desired: params.amount1Desired,
        //         amount0Min: params.amount0Min,
        //         amount1Min: params.amount1Min
        //     })
        // );

        // _mint(params.recipient, (tokenId = _nextId++));

        // bytes32 positionKey = PositionKey.compute(address(this), params.tickLower, params.tickUpper);
        // (, nat feeGrowthInside0LastX128, nat feeGrowthInside1LastX128, , ) = pool.positions(positionKey);

        // // idempotent set
        // nat poolId =
        //     cachePoolKey(
        //         address(pool),
        //         PoolAddress.PoolKey({token0: params.token0, token1: params.token1, fee: params.fee})
        //     );

        // _positions[tokenId] = Position({
        //     nonce: 0,
        //     operator: address(0),
        //     poolId: poolId,
        //     tickLower: params.tickLower,
        //     tickUpper: params.tickUpper,
        //     liquidity: liquidity,
        //     feeGrowthInside0LastX128: feeGrowthInside0LastX128,
        //     feeGrowthInside1LastX128: feeGrowthInside1LastX128,
        //     tokensOwed0: 0,
        //     tokensOwed1: 0
        // });

        // emit IncreaseLiquidity(tokenId, liquidity, amount0, amount1);
    }

    function isAuthorizedForToken(tokenId: nat) : bool {
        // require(_isApprovedOrOwner(msg.sender, tokenId), 'Not approved');
        return true
    }

    entry tokenURI(tokenId: nat) 
    // public view override(ERC721, IERC721Metadata) 
    // returns (string memory) 
    : string
    {
        // require(_exists(tokenId));
        // return INonfungibleTokenPositionDescriptor(tokenDescriptor___).tokenURI(this, tokenId);
    }

    // save bytecode by removing implementation of unused method
    function baseURI() 
    // public pure override returns (string memory) 
    : string
    {}

    /// @inheritdoc INonfungiblePositionManager
    getter increaseLiquidity(params: IncreaseLiquidityParams)
        // external
        // payable
        // override
        // checkDeadline(params.deadline)
        // returns 
        : (
            nat /* liquidity */,
            nat /* amount0 */,
            nat /* amount1 */
        )
    {
        // Position storage position = _positions[params.tokenId];

        // PoolAddress.PoolKey memory poolKey = _poolIdToPoolKey[position.poolId];

        // IUniswapV3Pool pool;
        // (liquidity, amount0, amount1, pool) = addLiquidity(
        //     AddLiquidityParams({
        //         token0: poolKey.token0,
        //         token1: poolKey.token1,
        //         fee: poolKey.fee,
        //         tickLower: position.tickLower,
        //         tickUpper: position.tickUpper,
        //         amount0Desired: params.amount0Desired,
        //         amount1Desired: params.amount1Desired,
        //         amount0Min: params.amount0Min,
        //         amount1Min: params.amount1Min,
        //         recipient: address(this)
        //     })
        // );

        // bytes32 positionKey = PositionKey.compute(address(this), position.tickLower, position.tickUpper);

        // // this is now updated to the current transaction
        // (, nat feeGrowthInside0LastX128, nat feeGrowthInside1LastX128, , ) = pool.positions(positionKey);

        // position.tokensOwed0 += nat(
        //     FullMath.mulDiv(
        //         feeGrowthInside0LastX128 - position.feeGrowthInside0LastX128,
        //         position.liquidity,
        //         FixedPoint128.Q128
        //     )
        // );
        // position.tokensOwed1 += nat(
        //     FullMath.mulDiv(
        //         feeGrowthInside1LastX128 - position.feeGrowthInside1LastX128,
        //         position.liquidity,
        //         FixedPoint128.Q128
        //     )
        // );

        // position.feeGrowthInside0LastX128 = feeGrowthInside0LastX128;
        // position.feeGrowthInside1LastX128 = feeGrowthInside1LastX128;
        // position.liquidity += liquidity;

        // emit IncreaseLiquidity(params.tokenId, liquidity, amount0, amount1);
    }

    /// @inheritdoc INonfungiblePositionManager
    entry decreaseLiquidity(params: DecreaseLiquidityParams)
        // external
        // payable
        // override
        // isAuthorizedForToken(params.tokenId)
        // checkDeadline(params.deadline)
        // returns 
        : (
            nat /* amount0 */, 
            nat /* amount1 */
        )
    {
        // require(params.liquidity > 0);
        // Position storage position = _positions[params.tokenId];

        // nat positionLiquidity = position.liquidity;
        // require(positionLiquidity >= params.liquidity);

        // PoolAddress.PoolKey memory poolKey = _poolIdToPoolKey[position.poolId];
        // IUniswapV3Pool pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));
        // (amount0, amount1) = pool.burn(position.tickLower, position.tickUpper, params.liquidity);

        // require(amount0 >= params.amount0Min && amount1 >= params.amount1Min, 'Price slippage check');

        // bytes32 positionKey = PositionKey.compute(address(this), position.tickLower, position.tickUpper);
        // // this is now updated to the current transaction
        // (, nat feeGrowthInside0LastX128, nat feeGrowthInside1LastX128, , ) = pool.positions(positionKey);

        // position.tokensOwed0 +=
        //     nat(amount0) +
        //     nat(
        //         FullMath.mulDiv(
        //             feeGrowthInside0LastX128 - position.feeGrowthInside0LastX128,
        //             positionLiquidity,
        //             FixedPoint128.Q128
        //         )
        //     );
        // position.tokensOwed1 +=
        //     nat(amount1) +
        //     nat(
        //         FullMath.mulDiv(
        //             feeGrowthInside1LastX128 - position.feeGrowthInside1LastX128,
        //             positionLiquidity,
        //             FixedPoint128.Q128
        //         )
        //     );

        // position.feeGrowthInside0LastX128 = feeGrowthInside0LastX128;
        // position.feeGrowthInside1LastX128 = feeGrowthInside1LastX128;
        // // subtraction is safe because we checked positionLiquidity is gte params.liquidity
        // position.liquidity = positionLiquidity - params.liquidity;

        // emit DecreaseLiquidity(params.tokenId, params.liquidity, amount0, amount1);
    }

    /// @inheritdoc INonfungiblePositionManager
    getter collect(params: CollectParams)
        // external
        // payable
        // override
        // isAuthorizedForToken(params.tokenId)
        // returns 
        :
        (
            nat /* amount0 */, 
            nat /* amount1 */
        )
    {
        // require(params.amount0Max > 0 || params.amount1Max > 0);
        // // allow collecting to the nft position manager address with address 0
        // address recipient = params.recipient == address(0) ? address(this) : params.recipient;

        // Position storage position = _positions[params.tokenId];

        // PoolAddress.PoolKey memory poolKey = _poolIdToPoolKey[position.poolId];

        // IUniswapV3Pool pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));

        // (nat tokensOwed0, nat tokensOwed1) = (position.tokensOwed0, position.tokensOwed1);

        // // trigger an update of the position fees owed and fee growth snapshots if it has any liquidity
        // if (position.liquidity > 0) {
        //     pool.burn(position.tickLower, position.tickUpper, 0);
        //     (, nat feeGrowthInside0LastX128, nat feeGrowthInside1LastX128, , ) =
        //         pool.positions(PositionKey.compute(address(this), position.tickLower, position.tickUpper));

        //     tokensOwed0 += nat(
        //         FullMath.mulDiv(
        //             feeGrowthInside0LastX128 - position.feeGrowthInside0LastX128,
        //             position.liquidity,
        //             FixedPoint128.Q128
        //         )
        //     );
        //     tokensOwed1 += nat(
        //         FullMath.mulDiv(
        //             feeGrowthInside1LastX128 - position.feeGrowthInside1LastX128,
        //             position.liquidity,
        //             FixedPoint128.Q128
        //         )
        //     );

        //     position.feeGrowthInside0LastX128 = feeGrowthInside0LastX128;
        //     position.feeGrowthInside1LastX128 = feeGrowthInside1LastX128;
        // }

        // // compute the arguments to give to the pool#collect method
        // (nat amount0Collect, nat amount1Collect) =
        //     (
        //         params.amount0Max > tokensOwed0 ? tokensOwed0 : params.amount0Max,
        //         params.amount1Max > tokensOwed1 ? tokensOwed1 : params.amount1Max
        //     );

        // // the actual amounts collected are returned
        // (amount0, amount1) = pool.collect(
        //     recipient,
        //     position.tickLower,
        //     position.tickUpper,
        //     amount0Collect,
        //     amount1Collect
        // );

        // // sometimes there will be a few less wei than expected due to rounding down in core, but we just subtract the full amount expected
        // // instead of the actual amount so we can burn the token
        // (position.tokensOwed0, position.tokensOwed1) = (tokensOwed0 - amount0Collect, tokensOwed1 - amount1Collect);

        // emit Collect(params.tokenId, recipient, amount0Collect, amount1Collect);
    }

    /// @inheritdoc INonfungiblePositionManager
    entry burn(tokenId: nat) 
    // external payable override isAuthorizedForToken(tokenId) 
    {
        // Position storage position = _positions[tokenId];
        // require(position.liquidity == 0 && position.tokensOwed0 == 0 && position.tokensOwed1 == 0, 'Not cleared');
        // delete _positions[tokenId];
        // _burn(tokenId);
    }

    getter _getAndIncrementNonce(tokenId: nat) 
    // internal override returns (nat) 
    : nat {
        // return nat(_positions[tokenId].nonce++);
    }

    /// @inheritdoc IERC721
    getter getApproved(tokenId: nat) 
    // public view override(ERC721, IERC721) returns (address) 
    : address {
        // require(_exists(tokenId), 'ERC721: approved query for nonexistent token');

        // return _positions[tokenId].operator;
    }

    /// @dev Overrides _approve to use the operator in the position, which is packed with the position permit nonce
    entry _approve(to: address, tokenId: nat) 
    // internal override(ERC721) 
    {
        // _positions[tokenId].operator = to;
        // emit Approval(ownerOf(tokenId), to, tokenId);
    }
// }
